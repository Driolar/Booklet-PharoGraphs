!!Introduction

Graphs are everywhere and they are well-known algorithms to get the best out of them. 
In this booklet the most common graph algorithms will be explained along with some case studies
where these algorithms can be applied. These algorithms are available in the ''Pharo AI'' ''graph-algorithms'' library available at: *https://github.com/pharo-ai/graph-algorithms*

This booklet describes the pseudocode of the algotihms and an explanation of how do they work. 

!!! Paris metro as graph example


A typical example is a metro map as the one of Paris as shown in Figure *@paris*.
What we see is that metro lines are connected by some stations for example (Gare du Nord connects line 5 and 4) and some stations are real hub where multiple lines meet such as Chatelet.
 
+Paris metro>figures/Paris_Metro_map_1024.pdf|width=100|label=paris+

When you visit Paris, you are often asking yourself how can you go from one place to another one
- what are the different possibilities?
- are they straight connections?
- finding the fastest one?
- finding the one with the least stops (because RER is a fast kind of metro but stopping only in certain places)
- finding the one with the least changes?
- what are all the places that I can reach in 5 stops?

All such questions can be answered by modeling the metro of Paris as a graph and applying algorithms to it. 

Several graphs can be represented: 
- we can have graph with only the shared stations and eliminate the station in between (this would not be really useful for users because you do not want to only used shared stations).
- we can have a graph with the time between two stations.


!!!! Outline of the document
In this little book we will describe some algorithms that can be applied to graphs. 
We will start with some basic definitions, then in subsequent chapters we will describe the following algorithms: 
topological sort, sortest path, Kruskal, Tarjan, HITs, ...


!!! How to install

You can install the library
executing the following code snippet:

[[[
Metacello new
	repository: 'github://pharo-ai/graph-algorithms/src';
	baseline: 'AIGraphAlgorithms';
	load
]]]

All the algorithms have the same API to set the nodes and the edges. 
The edges can be both weighted or unweighted.
A detailed explanation of how to use the API will be given on Chapter *@cha:repre*.





