!!Strongly Connected Components in a Graph

The most knew algorithms for finding the strongly connected components of a graph are: Tarjan's and Kosaraju’s algorithms.
Both algorithms have a time complexity of {{{$O(V + E)$}}} and are based on DFS (depth search first). But Tarjan's algorithm
is faster on practice. Because Kosaraju’s algorithm does two passes of DFS and Tarjan's only one.

Finding strongly connected components in a graph has several real life applications. For example it is used on social
media to find groups of friends to suggest commonly liked pages.

!!!Tarjan's algorithm

In order to find the strongly connected components of a graph, Tarjan's algorithm assigns a low-link value and an ID to each node.
It does a DFS pass to all the node in the graph and changes the low-link value. If at the end of the DFS call the low link value
of a node is the same as its ID, means that that node is the beginning of a strongly connect component.
The pseudocode is:

[[[
1. Mark the as unvisited and without an ID nor a low-link value.
2. Start DFS. When visiting a node assign it an ID and a low-link value same as the ID.
3. Mark current node as visited and add it to the stack.
4. On DFS callback, first, min the current node's low-link value with the low-link value of the adjacent node. Then, if the adjacent node is on the stack then min the current node's low-link with the adjacent node's ID.
5. After visiting all adjacent nodes, if the current node has its ID value as the same of its low-link value it means that there is a strongly connected component. So, pop all nodes from the stack until current node is reached.
]]]

In the Pharo implementation a ==traverse:== method is used. This is the DFS call. All the magic happens in that method.

[[[
AITarjan>>#run

	"Initialize an empty array for the strongly connected components"
	sccs := OrderedCollection new.
	stack := Stack new.
	runningIndex := 0.
	nodes do: [ :node |
		node isTarjanUndefined ifTrue: [
      "If the node has no low-link value set make a dfs call"
			self traverse: node ] ].
	^ self stronglyConnectedComponents
]]]

[[[
AITarjan>>#traverse: aTarjanNode

	"Assign a low-link and an ID"
	aTarjanNode tarjanIndex: runningIndex.
	aTarjanNode tarjanLowlink: runningIndex.
	runningIndex := runningIndex + 1.
	"Put the node in the stack"
	self putOnStack: aTarjanNode.
	"For all the adjacent nodes"
	aTarjanNode adjacentNodes do: [ :adjacentNode |
		adjacentNode isTarjanUndefined
			ifTrue: [
        "If the adjacent node doesn't have a low link make a recursive call"
				self traverse: adjacentNode.
				"Then update the low-link value with the min"
				aTarjanNode tarjanLowlink:
					(aTarjanNode tarjanLowlink
            min: adjacentNode tarjanLowlink) ]
			ifFalse: [
        "If the adjacent node had already a low link value"
				adjacentNode inStack ifTrue: [
          "And is in the stack update the low-link value"
					aTarjanNode tarjanLowlink:
						(aTarjanNode tarjanLowlink
              min: adjacentNode tarjanIndex) ] ] ].
	"If the node is the beginning of a strongly connected component"
	(self isRootNode: aTarjanNode) ifTrue: [
    "Get the nodes of the strongly connected component"
		self popStackAndAddNewSccUntil: aTarjanNode ]
]]]

!!!!Problem

The following graph represents a graph of connected people on a social media. An edge represents a follow. One person can follow
and can be followed. We want to know which and how many strongly connected components has the social network.

+Social network>figures/strongly_connected_graph.pdf|width=45+

The code for solving the problem is similar to the other algorithms. We instantiate the nodes, the edges and call the method run.

[[[
nodes := $a to: $h.
edges := #( #( $a $b ) #( $a $c ) #( $a $g ) #( $b $e ) #( $c $b )
            #( $c $d ) #( $d $f ) #( $f $c ) #( $g $h ) #( $g $d )
            #( $h $g ) ).
tarjan := AITarjan new.
tarjan
	nodes: nodes;
	edges: edges from: #first to: #second.
stronglyConnectedComponents := tarjan run
]]]

If we inspect the ==stronglyConnectedComponents== variable we will that that is a collection that contains 5 elements.
Each element is a list that contains the nodes corresponding to the strongly connected component.

[[[
an OrderedCollection($e)
an OrderedCollection($b)
an OrderedCollection($c $f $d)
an OrderedCollection($h $g)
an OrderedCollection($a)
]]]

So, our graph has 5 strongly connected components, which are: {{{$\{A\}$}}}, {{{$\{B\}$}}}, {{{$\{E\}$}}}, {{{$\{G, H\}$}}}, {{{$\{C, D, F\}$}}}

!!!Reducing a Graph

If we want to collapse all strongly connected components of a graph into a single one, we can use the Tarjan's algorithm to help in the task.
To do that

1. Find circuits using Tarjan's algorithm (strongly connected components which size is > 1)
2. Merge all nodes in circuit into one collapsed node.
3. Remove the nodes that were merged.
4. Add the new collapsed nodes.
5. Replace the old references to the merged nodes to reference the new collapsed nodes.

''Note that this algorithm for reducing a graph does not work on weighted graphs.''

!!!!Problem

We want to reduce the same graph collapsing all strongly connected components into one node.

[[[
nodes := $a to: $h.
edges := #( #( $a $b ) #( $a $c ) #( $a $g ) #( $b $e ) #( $c $b )
            #( $c $d ) #( $d $f ) #( $f $c ) #( $g $h ) #( $g $d )
            #( $h $g ) ).
graphReducer := AIGraphReducer new.
graphReducer
	nodes: nodes;
	edges: edges from: #first to: #second.
reducedGraph := graphReducer run
]]]

==reducedGraph== is a collection that contains all the new nodes of the graph. We can see that now there is only 5 nodes
(because the graph contained 5 strongly connected components). Also, you can inspect the collapsed nodes and you will
see the new adjacencies.

[[[
Merged nodes: $a
Merged nodes: $b
Merged nodes: $e
Merged nodes: $h, $g
Merged nodes: $c, $f, $d
]]]

+Reduced graph>figures/reduced_graph.pdf|width=45+
